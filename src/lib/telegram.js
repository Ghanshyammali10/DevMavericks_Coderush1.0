// Telegram Bot API helper for CME alerts

/**
 * Send Telegram alert message
 * @param {string} message - The message to send
 * @param {string} botToken - Telegram bot token (optional, uses env var if not provided)
 * @param {string} chatId - Telegram chat ID (optional, uses env var if not provided)
 * @returns {Promise<Object>} - Response from Telegram API
 */
export async function sendTelegramAlert(
  message,
  botToken = null,
  chatId = null
) {
  try {
    const token = botToken || process.env.TELEGRAM_BOT_TOKEN;
    const chat = chatId || process.env.TELEGRAM_CHAT_ID;

    if (!token || !chat) {
      console.warn("Telegram credentials not configured. Skipping alert.");
      return {
        success: false,
        error: "Telegram credentials not configured",
        message:
          "Set TELEGRAM_BOT_TOKEN and TELEGRAM_CHAT_ID environment variables",
      };
    }

    const url = `https://api.telegram.org/bot${token}/sendMessage`;
    const payload = {
      chat_id: chat,
      text: message,
      parse_mode: "HTML", // Support for basic HTML formatting
      disable_web_page_preview: true,
    };

    const response = await fetch(url, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(payload),
    });

    const result = await response.json();

    if (result.ok) {
      console.log("Telegram alert sent successfully");
      return {
        success: true,
        message_id: result.result.message_id,
        timestamp: new Date().toISOString(),
      };
    } else {
      console.error("Telegram API error:", result);
      return {
        success: false,
        error: result.description || "Unknown Telegram API error",
        code: result.error_code,
      };
    }
  } catch (error) {
    console.error("Failed to send Telegram alert:", error);
    return {
      success: false,
      error: error.message,
      timestamp: new Date().toISOString(),
    };
  }
}

/**
 * Send formatted CME alert to Telegram
 * @param {Object} anomaly - Anomaly data
 * @param {Object} forecast - Forecast data
 * @returns {Promise<Object>} - Response from Telegram API
 */
export async function sendCMEAlert(anomaly, forecast) {
  const message = `
üö® <b>CME ALERT DETECTED!</b>

<b>Reason:</b> ${anomaly.reason}
<b>ETA:</b> ${forecast.etaHours} hours
<b>Speed:</b> ${anomaly.windSpeed || "N/A"} km/s
<b>Particle Flux:</b> ${anomaly.particleFlux || "N/A"} particles/cm¬≤/s
<b>Timestamp:</b> ${new Date(anomaly.timestamp).toLocaleString()}

<b>Impact Likelihood:</b> ${Math.round(forecast.likelihood * 100)}%
<b>Method:</b> ${forecast.method}

‚ö†Ô∏è <i>Please check dashboard for detailed analysis</i>
  `.trim();

  return await sendTelegramAlert(message);
}

/**
 * Send test message to verify Telegram configuration
 * @returns {Promise<Object>} - Response from Telegram API
 */
export async function testTelegramConnection() {
  const message = `
üß™ <b>Telegram Test Message</b>

This is a test message from SolarFlux CME Dashboard.
If you receive this, Telegram integration is working correctly.

<b>Timestamp:</b> ${new Date().toLocaleString()}
  `.trim();

  return await sendTelegramAlert(message);
}

/**
 * Send daily summary of CME activity
 * @param {Array} anomalies - Array of anomalies for the day
 * @param {Array} events - Array of CME events for the day
 * @returns {Promise<Object>} - Response from Telegram API
 */
export async function sendDailySummary(anomalies = [], events = []) {
  const anomalyCount = anomalies.length;
  const eventCount = events.length;
  const ruleBasedCount = anomalies.filter((a) => a.isRuleBased).length;

  const message = `
üìä <b>Daily CME Summary</b>

<b>Date:</b> ${new Date().toLocaleDateString()}
<b>Total Events:</b> ${eventCount}
<b>Anomalies Detected:</b> ${anomalyCount}
<b>Rule-Based Alerts:</b> ${ruleBasedCount}

${anomalyCount > 0 ? "üö® <b>Active Alerts:</b>" : "‚úÖ <b>No Active Alerts</b>"}
${anomalies.map((a) => `‚Ä¢ ${a.reason}`).join("\n")}

<i>Generated by SolarFlux CME Dashboard</i>
  `.trim();

  return await sendTelegramAlert(message);
}
